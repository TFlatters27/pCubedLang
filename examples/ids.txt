{ID::CONSTANT} # used for defining a constant variable where VARIABLE_NAME must be in capitalized form
e.g {ID::CONSTANT} {ID::{VARIABLE_NAME}} {ASSIGNMENT::<-} {ID::{variable_value}} {NEWLINE::\n}

{ID::DIV} # integer division
e.g {INTEGER::{int}} {ID::DIV} {INTEGER::{int}}
{ID::MOD} # modulo division returns remainder from division
e.g {INTEGER::{int}} {ID::MOD} {INTEGER::{int}}

{ID::AND}
{ID::OR}
{ID::NOT}

# repeat statements until the Boolean expression is True
{ID::REPEAT}
{ID::UNTIL}
e.g

# while the Boolean expression is True repeat statements
{ID::WHILE}
{ID::ENDWHILE}

# repeat statements until variable defined is equal to value defined
# increment the variable by the STEP value, if ommited then STEP value is 1
{ID::FOR}
{ID::TO}
{ID::IN} # repeat statements for every value in array defined
{ID::STEP}
{ID::ENDFOR}


{ID::IF}
{ID::THEN} # only execute statements if the Boolean expression is True
{ID::ELSE} # is the Boolean expression is not True then execute statements
{ID::ENDIF}

{ID::RECORD}
{ID::ENDRECORD}

{ID::SUBROUTINE}
{ID::ENDSUBROUTINE}
{ID::RETURN}

{ID::LEN} # return the length of the array
{ID::POSITION} # returns the index of a value in an array (indexing from 0)
{ID::SUBSTRING} # returns a slice of the array between the two indices specified

{ID::USERINPUT} # assigns a value to variable specified by the user
{ID::OUTPUT} # outputs a value

{ID::STRING_TO_INT} # returns a string from an integer
{ID::STRING_TO_REAL} # returns a string from a real
{ID::INT_TO_STRING} # returns an integer from a string
{ID::REAL_TO_STRING} # returns a real from a string
{ID::CHAR_TO_CODE} # returns a integer from a character (using ASCII)
{ID::CODE_TO_CHAR} # returns a character from an integer (using ASCII)
{ID::RANDOM_INT} # return a random integer between the bounds specified

# Data types
{ID::String}
{ID::Char}

{ID::Integer}
{ID::Real}

{ID::Boolean}
  {ID::True}
  {ID::False}



