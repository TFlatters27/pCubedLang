# This program demonstrates various elements of AQA pseudo-code

# Constants
CONSTANT PI <- 3.14159
CONSTANT CHAR <- 'z' + 'x'
CONSTANT KELVIN <- -280
CONSTANT SUN <- -kelvin
CONSTANT CLASS_NAME <- "Year 4"
CONSTANT SPEED_OF_LIGHT <- (3 * 1000) - (3 / 1000) + 1
CONSTANT SCORES <- [85, 90, 88, 92, 95]
CONSTANT ALPHABET <- ['a', 'b', 'c', 'd', 'e', 'f']

# Variables
name <- 'Alice'
age <- 16 + 1
score <- 95.5 - 0.5
isPassed <- True
value <- a + b - c

# Arrays
table <- [[1,2],[2,4],[3,6],[4,8]]

# Array access
scores[0] <- 84
table[3][1] <- 16

# START RECORDS & SUBROUTINES
RECORD Student
  name : String
  age : Integer
  score : Real
  passed : Boolean
  array : Integer[][]
  grades : Char[]
ENDRECORD

student1 <- Student('Bob', 17, 89.5, True, table, ALPHABET)

student1.passed <- False

OUTPUT (3 = 3) AND (3 <= 4)
x <- 10
OUTPUT (x < 1) OR (x > 9)
a <- 1
b <- 2
OUTPUT NOT (a < b)
bool <- True
OUTPUT NOT bool

OUTPUT "Bob passed: ", student1.passed

SUBROUTINE add(a,b)
  result <- a + b
  RETURN result
ENDSUBROUTINE

SUBROUTINE printHello(i)
  FOR a <- 1 TO i
    OUTPUT "Hello World!"
  ENDFOR
ENDSUBROUTINE

bond <- add(3,7)
printHello(i)

OUTPUT "This is a test"
OUTPUT "Hello", "World", "!"

FOR a <- 1 TO 3
  OUTPUT a
ENDFOR
# will output 1, 2, 3

FOR a <- 1 TO 5 STEP 2
  OUTPUT a
ENDFOR
# will output 1, 3, 5

FOR a <- 5 TO 1 STEP -2
  OUTPUT a
ENDFOR
# will output 5, 3, 1

message <- "Bonjour!"
length <- 0
FOR char IN message
  length <- length + 1
ENDFOR
# will calculate the number of characters in message

reversed <- ''
FOR char IN message
  reversed <- char + reversed
ENDFOR
OUTPUT reversed
# will output the string in reverse


primes <- [2, 3, 5, 7, 11, 13]
total <- 0
FOR prime IN primes
  total <- total + prime
ENDFOR
OUTPUT 'Sum of the values in primes is'

sum <- sum + 1
square <- a^2.0
mod <- 7 MOD i

a <- 1
REPEAT
  OUTPUT a
  a <- a + 1
UNTIL a = 4
# will output 1, 2, 3

a <- 1
WHILE a < 4
  OUTPUT a
  a <- a + 1
ENDWHILE
# will output 1, 2, 3

a <- 1
IF (a MOD 2) = 0 THEN
  OUTPUT 'even'
ENDIF

a <- 1
IF NOT ((a MOD 2) != 0) THEN
  OUTPUT 'even'
ELSE
  OUTPUT 'odd'
ENDIF

a <- 1
IF (a MOD 4) = 0 THEN
  OUTPUT 'multiple of 4'
ELSE
  IF (a MOD 4) = 1 THEN
    OUTPUT 'leaves a remainder of 1'
  ELSE
    IF (a MOD 4) = 2 THEN
      OUTPUT 'leaves a remainder of 2'
    ELSE
      OUTPUT 'leaves a remainder of 3'
    ENDIF
  ENDIF
ENDIF

a <- 1
IF (a MOD 4) = 0 THEN
  OUTPUT 'multiple of 4'
ELSE IF (a MOD 4) = 1 THEN
  OUTPUT 'leaves a remainder of 1'
ELSE IF (a MOD 4) = 2 THEN
  OUTPUT 'leaves a remainder of 2'
ELSE
  OUTPUT 'leaves a remainder of 3'
ENDIF

student1 <- Student('Bob', 17, 89.5, True, table, ALPHABET)
student1.passed <- False
val <- student1.passed

